function updateStudentNames() {
  var ss = SpreadsheetApp.openById("149Sijm_wnCyOW2upuPlZBWzMJy5YNjCZQAC6s_im8Tw");
  var mainSheet = ss.getSheetByName("MainSheet");
  var referenceSheet = ss.getSheetByName("ReferenceSheet");
  var districtDatabaseSheet = SpreadsheetApp.openById("1m_47fY1FVZpFRIcDbvQhrkrRBoXlBZVD0wqwq85dKwo").getSheetByName("Contacts");

  if (!mainSheet || !referenceSheet || !districtDatabaseSheet) {
    Logger.log("One or more sheets not found!");
    return;
  }

  var mainData = mainSheet.getDataRange().getValues();
  var referenceData = referenceSheet.getDataRange().getValues();

  var idToNameMap = {};
  for (var i = 0; i < referenceData.length; i++) {
    var refID = referenceData[i][1]?.toString().trim();
    var refName = referenceData[i][0]?.toString().trim();
    if (refID) {
      idToNameMap[refID] = refName;
    }
  }

  var updates = [];
  var dateUpdates = [];
  var columnEUpdates = [];
  var priceUpdates = [];

  // Reset lastProcessedRow for testing
  PropertiesService.getScriptProperties().setProperty('lastProcessedRow', 1);

  var lastProcessedRow = PropertiesService.getScriptProperties().getProperty('lastProcessedRow') || 1;
  lastProcessedRow = parseInt(lastProcessedRow);

  Logger.log("Last Processed Row (Start): " + lastProcessedRow);

  var districtCache = getDistrictCache(); // Get or create district cache

  for (var j = lastProcessedRow; j < mainData.length; j++) {
    Logger.log("Processing Row: " + j);
    Logger.log("Last Processed Row (Loop): " + lastProcessedRow);

    var studentID = mainData[j][1]?.toString().trim();
    var newName = mainData[j][3];
    var columnEValue = mainData[j][4];
    var price = mainData[j][6];
    var currentDate = mainData[j][2];

    if (studentID) {
      var studentIDLower = studentID.toLowerCase();

      if (studentIDLower.includes("guest")) {
        newName = mainData[j][3];
        columnEValue = "Guest";
        currentDate = currentDate || Utilities.formatDate(new Date(), 'America/New_York', 'MM/dd/yyyy');
        if (!price) { // Check if price is already present
          price = calculatePrice(new Date());
        }
      } else {
        newName = idToNameMap[studentID];
        if (!newName) {
          // Check district cache first
          newName = districtCache[studentID];
          if (!newName) {
            var studentEmail = 's' + studentID + '@stu.palmbeachschools.org';
            var districtData = districtDatabaseSheet.getDataRange().getValues();
            for (var i = 0; i < districtData.length; i++) {
              if (districtData[i][1]?.toString().trim() === studentEmail) {
                newName = districtData[i][0]?.toString().trim();
                districtCache[studentID] = newName; // Add to cache
                setDistrictCache(districtCache); // Update cache
                columnEValue = "District";
                break;
              }
            }
            if (!newName) {
              var ui = SpreadsheetApp.getUi();
              var response = ui.alert("Are you sure you entered the correct Student ID? If you did, please add the name manually.", ui.ButtonSet.OK_CANCEL);
              if (response == ui.Button.CANCEL) {
                return;
              }
              newName = "Not Found";
            } else {
              columnEValue = "District";
            }
          } else {
            columnEValue = "District";
          }
        } else {
          columnEValue = "RPBHS";
        }

        currentDate = currentDate || Utilities.formatDate(new Date(), 'America/New_York', 'MM/dd/yyyy');
        if (!price) { // Check if price is already present
          price = calculatePrice(new Date());
        }
      }
    }

    updates.push([newName]);
    dateUpdates.push([currentDate]);
    columnEUpdates.push([columnEValue]);
    priceUpdates.push([price]);
  }

  if (updates.length > 0) {
    mainSheet.getRange(lastProcessedRow + 1, 4, updates.length, 1).setValues(updates);
    mainSheet.getRange(lastProcessedRow + 1, 3, dateUpdates.length, 1).setValues(dateUpdates);
    mainSheet.getRange(lastProcessedRow + 1, 5, columnEUpdates.length, 1).setValues(columnEUpdates);
    mainSheet.getRange(lastProcessedRow + 1, 7, priceUpdates.length, 1).setValues(priceUpdates);
  }

  if (mainData.length > 1) {
    PropertiesService.getScriptProperties().setProperty('lastProcessedRow', mainData.length);
  }
}

function calculatePrice(date) {
  var today = date;
  var todayFormatted = Utilities.formatDate(today, 'America/New_York', 'MM/dd/yyyy');

  if (today >= new Date('2025-01-25T00:00:00-05:00') && today < new Date('2025-09-07T00:00:00-05:00')) {
    return 25;
  } else if (today >= new Date('2025-09-08T00:00:00-05:00') && today < new Date('2025-09-14T00:00:00-05:00')) {
    return 30;
  } else if (today >= new Date('2025-09-15T00:00:00-05:00') && today < new Date('2025-09-22T00:00:00-05:00')) {
    return 35;
  } else {
    return "Invalid Date"; // You can handle this as needed
  }
}

function getDistrictCache() {
  var cache = PropertiesService.getScriptProperties().getProperty('districtCache');
  return cache ? JSON.parse(cache) : {};
}

function setDistrictCache(cache) {
  PropertiesService.getScriptProperties().setProperty('districtCache', JSON.stringify(cache));
}
